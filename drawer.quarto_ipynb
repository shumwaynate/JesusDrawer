{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Jesus Drawer\"\n",
        "author: \"Nathan Shumway\"\n",
        "format: dashboard\n",
        "execute:\n",
        "  keep-md: true\n",
        "---"
      ],
      "id": "acb55981"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#I am wanting to do a quick project that I want your help walking through, I want the project to be in a qmd file that I can render as a dashboard html. This will have only one block in it though, I want it to have a play/pause button and a restart button. When it starts I want it to play music from a specific file and when it starts I want it to start drawing one stroke at a time a picture of Jesus Christ. \n",
        "\n",
        "\n",
        "import cv2\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "from matplotlib.animation import FuncAnimation\n",
        "from IPython.display import HTML\n",
        "\n",
        "# Load and prepare image\n",
        "img = cv2.imread(\"image.png\", cv2.IMREAD_GRAYSCALE)\n",
        "img = cv2.resize(img, (300, 300), interpolation=cv2.INTER_CUBIC)\n",
        "blurred = cv2.GaussianBlur(img, (3, 3), 0)\n",
        "edges = cv2.Canny(blurred, 20, 80)\n",
        "\n",
        "# Extract contours\n",
        "contours, _ = cv2.findContours(edges, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)\n",
        "points = []\n",
        "for c in contours:\n",
        "    for pt in c:\n",
        "        points.append(tuple(pt[0]))\n",
        "\n",
        "# Reduce number of points to speed up\n",
        "step_size = 10  # Increase step size to reduce frames\n",
        "points = points[::step_size]\n",
        "\n",
        "# Set up drawing canvas\n",
        "fig, ax = plt.subplots()\n",
        "ax.set_xlim(0, 300)\n",
        "ax.set_ylim(0, 300)\n",
        "ax.invert_yaxis()\n",
        "ax.axis(\"off\")\n",
        "\n",
        "# Prepare original image as overlay (to fade in later)\n",
        "img_rgb = cv2.cvtColor(img, cv2.COLOR_GRAY2RGB)\n",
        "img_rgb = img_rgb.astype(np.float32) / 255.0\n",
        "overlay = ax.imshow(img_rgb, extent=[0, 300, 300, 0], alpha=0.0)\n",
        "\n",
        "# Pre-rendered frames (partial drawings)\n",
        "frame_images = []\n",
        "for i in range(1, len(points)+1):\n",
        "    # Create the frame image with only the first i points\n",
        "    frame_img = np.ones((300, 300, 3), dtype=np.float32) * 255  # White background\n",
        "    x_data, y_data = zip(*points[:i])  # Get first i points for each frame\n",
        "    frame_img = cv2.polylines(frame_img, [np.array(list(zip(x_data, y_data)), dtype=np.int32)], isClosed=False, color=(0, 0, 0), thickness=1)\n",
        "    frame_images.append(frame_img)\n",
        "\n",
        "# Animate the frames and apply fade effect\n",
        "fade_delay_frames = 60  # 5 seconds at 6 fps\n",
        "fade_duration_frames = 30\n",
        "total_draw_frames = len(frame_images)\n",
        "total_frames = total_draw_frames + fade_delay_frames + fade_duration_frames\n",
        "\n",
        "def update(frame):\n",
        "    if frame < total_draw_frames:\n",
        "        ax.imshow(frame_images[frame])\n",
        "    elif frame >= total_draw_frames + fade_delay_frames:\n",
        "        alpha = min((frame - total_draw_frames - fade_delay_frames) / fade_duration_frames, 1.0)\n",
        "        overlay.set_alpha(alpha)\n",
        "    \n",
        "    # Return a sequence (list) of artists\n",
        "    return [overlay]\n",
        "\n",
        "\n",
        "# Reduced FPS (from 12 to 6 for faster rendering)\n",
        "ani = FuncAnimation(fig, update, frames=total_frames, interval=1000/6, blit=True)\n",
        "\n",
        "# For Quarto or Jupyter output\n",
        "plt.close()\n",
        "HTML(ani.to_jshtml())\n"
      ],
      "id": "0f067576",
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "/usr/local/share/jupyter/kernels/python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}